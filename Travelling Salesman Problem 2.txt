#include <iostream>
#include <vector>
#include <limits.h>

using namespace std;

int n; // Number of cities
vector<vector<int>> cost; // Cost matrix
int minCost = INT_MAX; // Minimum cost to complete the tour
vector<int> bestPath; // Stores the minimum cost path

void tsp(vector<bool>& visited, int currPos, int count, int costSoFar, vector<int>& path) {
    if (count == n && cost[currPos][0] != 0) { // All cities visited, return to start
        int totalCost = costSoFar + cost[currPos][0];
        if (totalCost < minCost) {
            minCost = totalCost;
            bestPath = path;
            bestPath.push_back(0); // Return to the starting city
        }
        return;
    }

    for (int i = 0; i < n; i++) {
        if (!visited[i] && cost[currPos][i] != 0) {
            visited[i] = true;
            path.push_back(i); // Add city to path
            tsp(visited, i, count + 1, costSoFar + cost[currPos][i], path);
            path.pop_back(); // Backtrack
            visited[i] = false;
        }
    }
}

int main() {
    cout << "Enter the number of cities: ";
    cin >> n;
    
    cost.assign(n, vector<int>(n, 0));
    cout << "Enter the cost matrix (enter 0 if there's no direct path):" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> cost[i][j];
        }
    }

    vector<bool> visited(n, false);
    vector<int> path;
    visited[0] = true; // Start from the first city
    path.push_back(0); // Start path with the first city
    tsp(visited, 0, 1, 0, path);

    cout << "Minimum cost of the tour is: " << minCost << endl;
    cout << "Path taken by the salesman: ";
    for (int city : bestPath) {
        cout << city << " ";
    }
    cout << endl;
    return 0;
}
