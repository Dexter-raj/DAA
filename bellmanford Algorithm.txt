

#include <bits/stdc++.h>
using namespace std;

struct Edge{
int src,dest,wgt;
};

struct Graph{
   int V,E;
   struct Edge*edge;
};

struct Graph* gengraph(int V,int E)
{
  struct Graph*graph=new Graph;
  graph->V=V;
  graph->E=E;
  graph->edge=new Edge[E];
  return graph;
}

void printarr(int dist[],int n){
  cout<<"\nVertex Distenace from source:\n";
  for(int i=0;i<n;i++){
    cout<<i<<"\t\t"<<dist[i]<<"\n";
  }
}

void bellman(struct Graph*graph,int src)
{
  int V=graph->V;
  int E=graph->E;
  int dist[V];
  
  for(int i=0;i<V;i++)
  {
    dist[i]=999;
    dist[src]=0;
  }
  
  for(int i=1;i<=V-1;i++)
  {
    for(int j=0;j<E;j++){
      int u=graph->edge[j].src;
      int v=graph->edge[j].dest;
      int wgt=graph->edge[j].wgt;
      if(dist[u]!=999 && dist[u]+wgt<dist[v])
      dist[v]=dist[u]+wgt;       
    }
  }
  
  for(int i=0;i<E;i++)
  {
    int u=graph->edge[i].src;
    int v=graph->edge[i].dest;
    int wgt=graph->edge[i].wgt;
    if(dist[u]!=999 && dist[u]+wgt<dist[v])
    {
      cout<<"Graph contains -ve weight cycle";
      return;
    }
  }
  
  printarr(dist,V);
  return;
}
int main(){
  int V,E;
  cout<<"enter number of vertices:";
  cin>>V;
  cout<<"\nEnter number of edges";
  cin>>E;
  struct Graph*graph=gengraph(V,E);
  for(int i=0;i<E;i++)
  {
   cout<<"Enter edge"<<i+1<<"(src dest wgt): ";
   cin>>graph->edge[i].src >> graph->edge[i].dest >> graph->edge[i].wgt;
  }
  bellman(graph,0);
  return 0;
}





